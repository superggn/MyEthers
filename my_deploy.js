// 创建合约工厂实例的规则：
// const contractFactory = new ethers.ContractFactory(abi, bytecode, signer);
// 参数分别为合约ABI`abi`，合约字节码`bytecode`，Signer变量`signer`

// 利用合约工厂部署合约：
// contractFactory.deploy(args)
// 其中args为合约构造函数的参数

const { ethers } = require("ethers");

const ALCHEMY_SEPOLIA_URL =
  "https://eth-sepolia.g.alchemy.com/v2/L3Q6Wq4EjqlEk2W8qQdavHwh9Zuykv3-";

const provider = new ethers.JsonRpcProvider(ALCHEMY_SEPOLIA_URL);

// 利用私钥和provider创建wallet对象
const privateKey =
  "0x227dbb8586117d55284e26620bc76534dfbd2394be34cf4a09cb775d593b6f2b";
const wallet = new ethers.Wallet(privateKey, provider);

// ERC20的人类可读abi
const abiWETH = [
  "function deposit() public payable",
  "function withdraw(uint amount) public",
];

// 填入合约字节码，在remix中，你可以在两个地方找到Bytecode
// 1. 编译面板的Bytecode按钮
// 2. 文件面板artifact文件夹下与合约同名的json文件中
// 里面"bytecode"属性下的"object"字段对应的数据就是Bytecode，挺长的，608060起始
// "object": "608060405260646000553480156100...
const bytecodeWETH =
  "0x608060405234801561001057600080fd5b506040805180820182526004808252630ae8aa8960e31b602080840182905284518086019095529184529083015290600361004b8382610101565b5060046100588282610101565b5050506101c0565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061008a57607f821691505b6020821081036100aa57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156100fc576000816000526020600020601f850160051c810160208610156100d95750805b601f850160051c820191505b818110156100f8578281556001016100e5565b5050505b505050565b81516001600160401b0381111561011a5761011a610060565b61012e816101288454610076565b846100b0565b602080601f831160018114610163576000841561014b5750858301515b600019600386901b1c1916600185901b1785556100f8565b600085815260208120601f198616915b8281101561019257888601518255948401946001909101908401610173565b50858210156101b05787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610927806101cf6000396000f3fe6080604052600436106100a05760003560e01c8063313ce56711610064578063313ce5671461017157806370a082311461018d57806395d89b41146101c3578063a9059cbb146101d8578063d0e30db0146100af578063dd62ed3e146101f8576100af565b806306fdde03146100b7578063095ea7b3146100e257806318160ddd1461011257806323b872dd146101315780632e1a7d4d14610151576100af565b366100af576100ad61023e565b005b6100ad61023e565b3480156100c357600080fd5b506100cc61027f565b6040516100d99190610757565b60405180910390f35b3480156100ee57600080fd5b506101026100fd3660046107c2565b610311565b60405190151581526020016100d9565b34801561011e57600080fd5b506002545b6040519081526020016100d9565b34801561013d57600080fd5b5061010261014c3660046107ec565b61032b565b34801561015d57600080fd5b506100ad61016c366004610828565b61034f565b34801561017d57600080fd5b50604051601281526020016100d9565b34801561019957600080fd5b506101236101a8366004610841565b6001600160a01b031660009081526020819052604090205490565b3480156101cf57600080fd5b506100cc6103db565b3480156101e457600080fd5b506101026101f33660046107c2565b6103ea565b34801561020457600080fd5b50610123610213366004610863565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61024833346103f8565b60405134815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a2565b60606003805461028e90610896565b80601f01602080910402602001604051908101604052809291908181526020018280546102ba90610896565b80156103075780601f106102dc57610100808354040283529160200191610307565b820191906000526020600020905b8154815290600101906020018083116102ea57829003601f168201915b5050505050905090565b60003361031f818585610437565b60019150505b92915050565b600033610339858285610449565b6103448585856104c7565b506001949350505050565b3360009081526020819052604090205481111561036b57600080fd5b6103753382610526565b604051339082156108fc029083906000818181858888f193505050501580156103a2573d6000803e3d6000fd5b5060405181815233907f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b659060200160405180910390a250565b60606004805461028e90610896565b60003361031f8185856104c7565b6001600160a01b0382166104275760405163ec442f0560e01b8152600060048201526024015b60405180910390fd5b61043360008383610558565b5050565b6104448383836001610682565b505050565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981146104c157818110156104b257604051637dc7a0d960e11b81526001600160a01b0384166004820152602481018290526044810183905260640161041e565b6104c184848484036000610682565b50505050565b6001600160a01b0383166104f157604051634b637e8f60e11b81526000600482015260240161041e565b6001600160a01b03821661051b5760405163ec442f0560e01b81526000600482015260240161041e565b610444838383610558565b6001600160a01b03821661055057604051634b637e8f60e11b81526000600482015260240161041e565b610433826000835b6001600160a01b03831661058357806002600082825461057891906108d0565b909155506105f59050565b6001600160a01b038316600090815260208190526040902054818110156105d65760405163391434e360e21b81526001600160a01b0385166004820152602481018290526044810183905260640161041e565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b03821661061157600280548290039055610630565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161067591815260200190565b60405180910390a3505050565b6001600160a01b0384166106ac5760405163e602df0560e01b81526000600482015260240161041e565b6001600160a01b0383166106d657604051634a1406b160e11b81526000600482015260240161041e565b6001600160a01b03808516600090815260016020908152604080832093871683529290522082905580156104c157826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161074991815260200190565b60405180910390a350505050565b60006020808352835180602085015260005b8181101561078557858101830151858201604001528201610769565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146107bd57600080fd5b919050565b600080604083850312156107d557600080fd5b6107de836107a6565b946020939093013593505050565b60008060006060848603121561080157600080fd5b61080a846107a6565b9250610818602085016107a6565b9150604084013590509250925092565b60006020828403121561083a57600080fd5b5035919050565b60006020828403121561085357600080fd5b61085c826107a6565b9392505050565b6000806040838503121561087657600080fd5b61087f836107a6565b915061088d602084016107a6565b90509250929050565b600181811c908216806108aa57607f821691505b6020821081036108ca57634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561032557634e487b7160e01b600052601160045260246000fdfea2646970667358221220e624e2eea7bbb287bf822f060ab042f012693dfee3efab0147d27dd3b8ec863064736f6c63430008190033";

const factoryERC20 = new ethers.ContractFactory(abiWETH, bytecodeWETH, wallet);
// const balanceETH = await provider.getBalance(wallet);

const contractWETH = await factoryERC20.deploy();
console.log(`合约地址: ${contractWETH.target}`);
console.log("部署合约的交易详情");
console.log(contractWETH.deploymentTransaction());
console.log("\n等待合约部署上链");
await contractWETH.waitForDeployment();
console.log("合约已上链");

// 2. 打印合约的name()和symbol()，然后调用mint()函数，给自己地址mint 10,000代币
console.log("\n2. 调用mint()函数，给自己地址mint 10,000代币");
console.log(`合约名称: ${await contractWETH.name()}`);
console.log(`合约代号: ${await contractWETH.symbol()}`);
// contractWETH.deposit();
let tx = await contractWETH.mint("10000");
console.log("等待交易上链");
await tx.wait();
console.log(`mint后地址中代币余额: ${await contractWETH.balanceOf(wallet)}`);
console.log(`代币总供给: ${await contractWETH.totalSupply()}`);
